using ForumAnalyzerPro.Common;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace ForumAnalyzerPro.Algorithms.submodules
{
    internal class HomepageParser
    {
        private Http http;
        string[] blacklisted_words = { "members", "users", "member", "user", "ratings_guide", "consumer" };

        public HomepageParser(Http http)
        {
            this.http = http;
        }

        //parse internal URLs
        public IList<Uri> GetInternalPages(Uri url)
        {
            if (http.Aborted) return null;
            string rs = http.GET(url.AbsoluteUri, "", Http.DefaultHeaders, null);
            return AllLinksFromHomePage(rs, url.AbsoluteUri);
        }

        //unkown forum type
        protected IList<Uri> AllLinksFromHomePage(string rs, string rootpath)
        {
            var list = new List<Uri>();// final list
            var list2 = new List<Uri>(); //we'll save here only uniques
            try
            {
                string pattern_threadid = "[\\=\\/\\-]((\\d){5,})(\\-|\\&){0,}";
                string pattern = "<a\\s+(?:[^>]*?\\s+)?href=\"([^\"]*)\"";
                MatchCollection mc = Regex.Matches(rs, pattern);
                foreach (Match m in mc)
                {
                    string s = m.Groups[1].ToString();

                    if (blacklisted_words.Any(s.Contains)) continue;
                    if (!s.Contains("http")) s = rootpath + s;
                    if (!Http.ValidUri(s)) continue;

                    var u = new Uri(s); if (list2.Contains(u) || list.Contains(u)) continue;
                    list.Add(u);
                    Match mm = Regex.Match(s, pattern_threadid);
                    if (mm.Captures.Count > 0)
                    { list2.Add(u); AddRandomUri(ref list2, s, mm.Groups[1].ToString()); }
                }


            }
            catch (Exception ex)
            {
                string msg = "Error HP53." + Environment.NewLine + ex.Message + Environment.NewLine + (ex.InnerException != null ? ex.InnerException.Message : "");
                Logging.Log("user", "Algo", msg);
            }

            //let's decide whether to use random-id-generated list OR only unique URL's
            if (list2.Count * 100 / list.Count > 15) //if #unique is greater than #autogenerated
            {
                var rnd = new Random();
                IList<Uri> b = list2.OrderBy(i => rnd.Next()).Cast<Uri>().ToList(); ;
                return b;
            }
            else
            {
                var sorted = from s in list
                             orderby s.AbsoluteUri.Length descending
                             select s;
                return sorted.Cast<Uri>().ToList();
            }
        }

        private void AddRandomUri(ref List<Uri> list, string url, string number)
        {
            //extra links by increm. thread_id
            for (int i = 0; i < 20; i++)
            {
                int n;
                if (int.TryParse(number, out n))
                {
                    try
                    {
                        string s = url.Replace(n.ToString(), (n - i - 1).ToString());
                        var u = new Uri(s);
                        if (Http.ValidUri(s) && !list.Contains(u))
                            list.Add(u);
                    }
                    catch (Exception ex)
                    {
                        string msg = "Error HP71." + Environment.NewLine + ex.Message + Environment.NewLine + (ex.InnerException != null ? ex.InnerException.Message : "");
                        Logging.Log("user", "Algo", msg);
                    }
                }
            }
        }


    }
}
